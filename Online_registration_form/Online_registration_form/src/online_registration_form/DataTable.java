/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package online_registration_form;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import net.proteanit.sql.DbUtils;
import static online_registration_form.OnlineForm.cnic_tf;
import static online_registration_form.OnlineForm.father_tf;
import static online_registration_form.OnlineForm.jRadioButton1;
import static online_registration_form.OnlineForm.jRadioButton2;
import static online_registration_form.OnlineForm.name_tf;
import static online_registration_form.OnlineForm.phone_tf;

/**
 *
 * @author Rashda Khanzada
 */
public class DataTable extends javax.swing.JFrame {

    /**
     * Creates new form DataTable
     */
   
   Connection conn;
   PreparedStatement param;
   ResultSet rs;
   
   JButton button = new JButton();//
    public DataTable() {
        initComponents();
        conn=ConnectionDB.ConnectDb();
                update();
    }
    public void update(){
      try{
         String sql="select * from online_form order by id asc";
         param=conn.prepareStatement(sql);
         rs=param.executeQuery();
         table.setModel(DbUtils.resultSetToTableModel(rs));
        
      }
      catch(Exception e){
          JOptionPane.showMessageDialog(null, e.getMessage());
       }
      finally{
         try{
             rs.close();
             param.close();     
         }
         catch(Exception e){}
      }
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back_button = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        update_button = new javax.swing.JButton();
        delete_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        back_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images.png"))); // NOI18N
        back_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_buttonActionPerformed(evt);
            }
        });
        getContentPane().add(back_button);
        back_button.setBounds(0, 0, 50, 40);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Name", "Father Name", "Phone no", "Cnic", "Gender"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 80, 810, 402);

        update_button.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        update_button.setText("Update");
        update_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_buttonActionPerformed(evt);
            }
        });
        getContentPane().add(update_button);
        update_button.setBounds(450, 510, 110, 41);

        delete_button.setFont(new java.awt.Font("Segoe Print", 1, 18)); // NOI18N
        delete_button.setText("Delete");
        delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_buttonActionPerformed(evt);
            }
        });
        getContentPane().add(delete_button);
        delete_button.setBounds(330, 510, 100, 41);

        setSize(new java.awt.Dimension(893, 638));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void back_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_buttonActionPerformed
        OnlineForm form=new OnlineForm();
        this.hide();
        form.show();
    }//GEN-LAST:event_back_buttonActionPerformed

    //update record
    private void update_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_buttonActionPerformed
        int row=table.getSelectedRow();
        DefaultTableModel model= (DefaultTableModel)table.getModel();
        OnlineForm form=new OnlineForm();
        String selected = model.getValueAt(row, 0).toString();
         int a=Integer.parseInt(selected);
        this.hide();
        form.show();
        name_tf.setText(model.getValueAt(row, 1).toString());
        father_tf.setText(model.getValueAt(row, 2).toString());
        phone_tf.setText(model.getValueAt(row, 3).toString());   
        cnic_tf.setText(model.getValueAt(row, 4).toString());  
        
    }//GEN-LAST:event_update_buttonActionPerformed

    //delete record 
    private void delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_buttonActionPerformed

          int row = table.getSelectedRow();
          DefaultTableModel model= (DefaultTableModel)table.getModel();
          String selected = model.getValueAt(row, 0).toString();
          int a=Integer.parseInt(selected);
           if (row >= 0) {
                model.removeRow(row);
                try { 
                    String sql ="delete from online_form where id= ?";
                    param=conn.prepareStatement(sql);
                    param.setInt(1 , a);
                    int  i=param.executeUpdate();
                    if(i>0){
                        JOptionPane.showMessageDialog(null,"Data is deleted");
                    }
                    else
                        JOptionPane.showMessageDialog(null,"Data is  not deleted");
                }
                catch (SQLException w) {
                    JOptionPane.showMessageDialog(this, w);
                }           
            }
    }//GEN-LAST:event_delete_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back_button;
    private javax.swing.JButton delete_button;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JButton update_button;
    // End of variables declaration//GEN-END:variables
}
/*
//Button Renderer class
class ButtonRenderer extends JButton implements TableCellRenderer {

    public ButtonRenderer() {
        setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        if (isSelected) {
            setForeground(table.getSelectionForeground());
            setBackground(table.getSelectionBackground());
        } else {
            setForeground(table.getForeground());
            setBackground(UIManager.getColor("Button.background"));
        }
        setText((value == null) ? "" : value.toString());
        return this;
    }
}

class ButtonEditor extends DefaultCellEditor {

    protected JButton button;
    private String label;
    private boolean isPushed;

    public ButtonEditor(JCheckBox checkBox) {
        super(checkBox);
        button = new JButton();
        button.setOpaque(true);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                fireEditingStopped();
            }
        });
    }
    
@Override
    public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int row, int column) {
        if (isSelected) {
            button.setForeground(table.getSelectionForeground());
            button.setBackground(table.getSelectionBackground());
        } else {
            button.setForeground(table.getForeground());
            button.setBackground(table.getBackground());
        }
        label = (value == null) ? "" : value.toString();
        button.setText(label);
        isPushed = true;
        return button;
    }
    
@Override
    public Object getCellEditorValue() {
        if (isPushed) {
            JOptionPane.showMessageDialog(button, label + ": Ouch!");
        }
        isPushed = false;
        return label;
    }

    @Override
    public boolean stopCellEditing() {
        isPushed = false;
        return super.stopCellEditing();
    }
}*/

